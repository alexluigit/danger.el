#+AUTHOR: Alex Lu
#+EMAIL: alexluigit@gmail.com
#+startup: content

*TL;DR*: Grab the config from [[#Sample-config][Sample config]]. Read following docs in-depth if you
want further customizations.

-----

* Prerequisites

|-------------------+----------------------------+----------|
| Package           | Description                | Required |
|-------------------+----------------------------+----------|
| =Emacs 27.1=        | Support Emacs 27.1 onward  | Required |
| =all-the-icons.el=  | Icon support               | Optional |
| =vscode-icon.el=    | Icon support               | Optional |
| =pdf-tools=         | Preview pdf documents      | Optional |
| =imagemagick=       | Generate image cache       | Optional |
| =ffmpegthumbnailer= | Generate video thumbnailer | Optional |
| =epub-thumbnailer=  | Generate epub thumbnailer  | Optional |
| =zipinfo=           | Preview zip files          | Optional |
| =mediainfo=         | Display media metadata     | Optional |
|-------------------+----------------------------+----------|

It is recommended to use the latest version of these packages/applications,
otherwise the preview functionality may not work correctly.

* Customizing options

|-------------------------------+----------------------------------------|
| Option                        | Description                            |
|-------------------------------+----------------------------------------|
| ~dirvish-cache-dir~             | Cache directory                        |
| ~dirvish-auto-cache-threshold~  | Generate cache images automatically    |
| ~dirvish-default-layout~        | Default layout for fullscreen sessions |
| ~dirvish-hide-details~          | Hide details as you see fit            |
| ~dirvish-mode-line-position~    | The place to put the mode line         |
| ~dirvish-mode-line-height~      | The height of mode line                |
| ~dirvish-mode-line-format~      | Mode line format in root window        |
| ~dirvish-header-line-position~  | The place to put the header line       |
| ~dirvish-header-line-height~    | The height of header line              |
| ~dirvish-header-line-format~    | Header line format in root window      |
| ~dirvish-preview-disabled-exts~ | Disable preview for some filetypes     |
| ~dirvish-open-with-programs~    | Open certain files with external apps  |
| ~dirvish-reuse-session~         | See [[#In relation to Dired][In relation to Dired]]               |
| ~dirvish-preview-dispatchers~   | See [[#Preview-strategies][Preview strategies]]                 |
| ~dirvish-attributes~            | See [[#Extra-attributes][Extra attributes]]                   |
|-------------------------------+----------------------------------------|
Consult the docstring of the options for details.

* In relation to Dired

A Dirvish session holds a set of buffers with ~dirvish-mode~ as its
~major-mode~. Since ~dirvish-mode~ is a derived mode from ~dired-mode~, most of the
Dired commands work exactly the same in a ~dirvish-mode~ buffer. Nonetheless,
Dirvish and Dired handle the following aspects differently.

** Parsing switches

Dirvish avoids regex-based solutions as much as possible, this also applies to
the parsing of ~dired-listing/actual-switches~ and ~dirvish-fd-switches~.  As a
result, in order to setup ~dired-listing-switches~ and ~dirvish-fd-switches~
correctly, there are a few rules here:

1. Make sure to use the long name of ~ls~ flags whenever possible.

   * use =--almost-all= instead of =-A=
   * use =--sort=version= instead of =-v=

2. avoid duplicate flags which makes no sense.

   These 3 patterns give the same directory listing result, but the =sort=
   attribute would only get correct information with the last one.

   * =--sort=version --sort=time= (duplicate, the latter flag is ignored)
   * =-v --sort-time= (same as the above one, meanwhile this also violates rule NO.1)
   * =--sort=time=

3. Use ~dirvish-quicksort~ instead of ~dired-sort-toggle-or-edit~

   If you insist on using the ~dired-sort-toggle-or-edit~ command, you'll have
   to obey the above rules when entering the ls flags.

** Isolated sessions

Each Dirvish has its own window layout along with some other isolated niceties
such as header string. This makes it easy for Dirvish to adapt itself towards
different file management tasks.

** Buffer management

=dired= command and friends create new Dired buffers, hence navigating through
the file system always end up with a lot of Dired buffers. To avoid this, one
can either replace ~dired-find-file~ with ~dired-find-alternate-file~ or enable
~dired-kill-when-opening-new-dired-buffer~, but they introduce two new issues:

- Dired buffers in other windows/tabs/frames might be killed unexpectedly
- Dired buffers are no longer reusable

As a comparison, the directory/preview buffers are reused during a Dirvish
session and get killed when user explicitly exit the session.

The buffer holding the last entry of the session won't get killed on session
exit if ~dirvish-reuse-session~ is enabled (disabled by default).

** Mode line

Dirvish has its own mode-line that can be customized with
~dirvish-mode-line-format~, hence the ~dired-switches-in-mode-line~ option is
ignored in Dirvish.

* Extra attributes

A list of file attributes such as ~file-size~ showing in file lines are stored in
the variable ~dirvish-attributes~. Evaluate this to get all available attributes:

#+begin_src emacs-lisp
(prog1 (mapc #'require (mapcar #'car dirvish-attrs-library))
  (describe-variable 'dirvish--available-attrs))
#+end_src

To change the attributes session locally, see [[file:EXTENSIONS.org][dirvish-menu]].

* Preview strategies

A preview dispatcher represents a strategy for file preview on certain
conditions. The variable ~dirvish-preview-dispatchers~, which holds all the active
dispatchers, has the default value looks like:

#+begin_src emacs-lisp
(image gif video audio epub pdf archive)
#+end_src

Each dispatcher in this list handles the validation and preview content
generation for the corresponding filetype. Consult ~dirvish-define-preview~ and
~dirvish-preview-dispatch~ for details.

Here are two customization examples.

** Example 1: directory preview using ~exa~ command

Let's assume you don't like the default directory preview results provided by
Dired, you can create a directory previewer that utilizes the ~exa~ command:

#+begin_src emacs-lisp
(dirvish-define-preview exa (file)
  "Use `exa' to generate directory preview."
  (when (file-directory-p file) ; we only interest in directories here
    `(shell . ("exa" "--color=always" "-al" ,file)))) ; use the output of `exa' command as preview

(add-to-list 'dirvish-preview-dispatchers 'exa)
#+end_src

This makes Dirvish use the output from ~exa~ shell command as your preview content
for a directory entry. The other benefit of doing so is that Dirvish execute
shell commands asynchronously, therefore preview a huge directory won't block
the main process of Emacs.

On a side note, you can customize the corresponding =ansi-color= faces to change
the coloring in the preview window.

#+begin_src emacs-lisp
(set-face-attribute 'ansi-color-blue nil :foreground "#FFFFFF")
#+end_src

[[https://user-images.githubusercontent.com/16313743/158852998-ebf4f1f7-7e12-450d-bb34-ce04ac22309c.png][https://user-images.githubusercontent.com/16313743/158852998-ebf4f1f7-7e12-450d-bb34-ce04ac22309c.png]]
[screenshot from the ~doom-one~ theme]

** Example 2: preview =README.md= in a project when it exists

Here we create a dispatcher to preview the =README.md= file in a directory:

#+begin_src emacs-lisp
(dirvish-define-preview readme (file)
  "Preview README.md file in a directory when it exists."
  (when (file-directory-p file)
    (let ((readme-file (expand-file-name "README.md" file)))
      (when (file-exists-p readme-file) ; when the README.md exists
        `(buffer . ,(find-file-noselect readme-file t nil)))))) ; use the file buffer as preview

(add-to-list 'dirvish-preview-dispatchers 'readme)
#+end_src

If you find it useful, you can extend this dispatcher to support "README.org" or
make it case insensitive etc.

* Working with TRAMP

Dirvish integrates TRAMP at its core.  But most of the features (file preview,
asynchronous file transfer through =dirvish-yank= .etc) that are available in
localhost are NOT enabled over a /synchronous/ TRAMP connection (see:
[[https://www.gnu.org/software/tramp/#Improving-performance-of-asynchronous-remote-processes-1][TRAMP-async]]).  To enable them on a remote host, one will need to have a proper
ssh config such as ssh-agent for that host, because it requires working SSH
authentication which bypasses the password entering to work.

You can improve the speed and responsiveness of TRAMP by tweaking its options,
see the sample config below.

* Working with Doom Emacs

The =dired= module in Doom Emacs provides a lot of features by the help of various
third-party Dired packages, which works fine for users who just want a OOTB
Dired experience.  But, alas, there are downsides to this.

1. To make these utilities work together inside of Doom, it applied some hacks
   to eliminate the conflicts among them (FWIW, this actully happened to many
   people's Dired config), which may cause troubles when users want to tweak the
   behaviors of these packages.

2. Adopting a new functionality to Dired becomes very difficult since there are
   too many moving parts involve with it.

   If you've been using this module and other packages (say =hl-line=,
   =dired-subtree=) intensively, I believe you've experienced at least one of
   these: =all-the-icons-dired= breaks line highlighting, =dired-git-info= prevents
   you from inserting a subtree, =diff-hl= refuses to highlight subtree entries,
   among other things.

Dirvish not only includes almost every feature that this module provides, but
also implemented them under the same architecture powered by =dirvish.el= in the
form of separate extensions. As a result, all of them are modular tools that are
independent of each other yet can operate in tandem without any user
interference, which means ugly hacks is no longer needed.

If you still want to use the =dired= module in Doom, here are some caveats.

*** Remap/disable ~+dired/quit-all~ command (required)
  
After you enable the =dired= module, Doom remaps =q= key to a custom command
~+dired/quit-all~, which doesn't work well with Dirvish. You can either override
this function with ~quit-window~ or bind ~quit-window~ to =q= directly.

*** Remove =+icons= flag in dired module (required)

It's not recommended to use =all-the-icons-dired.el= and Dirvish together, see [[https://github.com/alexluigit/dirvish/blob/main/FAQ.org#all-the-icons-dired][FAQ]].

*** Use ~vc-state~ attribute instead of ~diff-hl-dired-mode~

The ~vc-state~ attribute in Dirvish can achieve the same functionality without
sacrificing performance. Meanwhile, ~diff-hl-dired-mode~ doesn't mesh well with
=dirvish-subtree= nor =dired-subtree=.

*** Use ~git-msg~ attribute instead of =dired-git-info=

For same reason describe in the above ~vc-state~ section.

*** Use =dirvish-fd= instead of =fd-dired=

See [[https://github.com/alexluigit/dirvish/blob/main/FAQ.org#find-dired--fd-dired][FAQ]].

*** Use =dirvish-yank= instead of =dired-rsync=

Multi-stage copy/paste, asynchronous I/O (whenever applicable), work with TRAMP,
=dirvish-yank= has all of them. =dirvish-yank= also handles file operations on the
same remote host, see: https://github.com/stsquad/dired-rsync/issues/24.

* Hooks

|---------------------------+-------------------------------------------|
| Hook                      | Description                               |
|---------------------------+-------------------------------------------|
| ~dirvish-activation-hook~   | Executed on session activation.           |
| ~dirvish-deactivation-hook~ | Executed on session deactivation.         |
| ~dirvish-mode-hook~         | Executed on parent buffer initialization. |
| ~dirvish-setup-hook~        | Executed after file-attributes retrieved. |
| ~dirvish-after-revert-hook~ | Executed after ~dirvish-revert~.            |
| ~dirvish-find-entry-hook~   | Executed after ~dirvish--find-entry~.       |
|---------------------------+-------------------------------------------|

* Sample config
** Dired | Dirvish

#+begin_src emacs-lisp
;; This is *NECESSARY* for Doom users who enabled `dired' module
;; (map! :map dired-mode-map :ng "q" #'quit-window)

(use-package dirvish
  :custom
  ;; Go back home? Just press `bh'
  (dirvish-bookmark-entries
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")
     ("m" "/mnt/"                       "Drives")
     ("t" "~/.local/share/Trash/files/" "TrashCan")))
  ;; (dirvish-header-line-format '(:left (path) :right (free-space)))
  (dirvish-mode-line-format ; it's ok to place string inside
   '(:left (sort file-time " " file-size symlink) :right (omit yank index)))
  (dirvish-attributes '(subtree-state all-the-icons collapse))
  ;; (dirvish-attributes '(file-size vscode-icon)) ; Feel free to try different combination
  ;; Maybe the icons are too big to your eyes
  ;; (dirvish-all-the-icons-height 0.8)
  ;; In case you want the details at startup like `dired'
  ;; (dirvish-hide-details nil)
  :config
  ;; Place this line under :init to ensure the overriding at startup, see #22
  (dirvish-override-dired-mode)
  (dirvish-peek-mode)
  ;; Dired options are respected except a few exceptions,
  ;; see *In relation to Dired* section above
  (setq dired-recursive-deletes 'always)
  (setq delete-by-moving-to-trash t)
  (setq dired-dwim-target t)
  ;; Make sure to use the long name of flags when exists
  ;; eg. use "--almost-all" instead of "-A"
  ;; Otherwise some commands won't work properly
  (setq dired-listing-switches
        "-l --almost-all --human-readable --time-style=long-iso --group-directories-first --no-group")
  :bind
  ;; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
  (("C-c f" . dirvish-fd)
   :map dired-mode-map ; Dirvish respects all the keybindings in this map
   ;; ("h" . dired-up-directory)
   ;; ("j" . dired-next-line)
   ;; ("k" . dired-previous-line)
   ;; ("l" . dired-find-file)
   ;; ("i" . wdired-change-to-wdired-mode)
   ;; ("." . dired-omit-mode)
   ("TAB" . dirvish-subtree-toggle)
   ("SPC" . dirvish-history-jump)
   ("M-n" . dirvish-history-go-forward)
   ("M-p" . dirvish-history-go-backward)
   ("M-s" . dirvish-setup-menu)
   ("M-f" . dirvish-toggle-fullscreen)
   ("*"   . dirvish-mark-menu)
   ("E"   . dirvish-emerge-menu)
   ("N"   . dirvish-narrow)
   ("r"   . dirvish-fd-roam)
   ("b"   . dirvish-bookmark-goto)
   ("f"   . dirvish-file-info-menu)
   ([remap dired-sort-toggle-or-edit] . dirvish-quicksort)
   ([remap dired-do-redisplay] . dirvish-ls-switches-menu)
   ([remap dired-summary] . dirvish-dispatch)
   ([remap dired-do-copy] . dirvish-yank-menu)
   ([remap mode-line-other-buffer] . dirvish-history-last)))
#+end_src

** Complementary packages

These packages are only listed here for discoverability.

#+begin_src emacs-lisp
(use-package dired-x
  ;; Enable dired-omit-mode by default
  ;; :hook
  ;; (dired-mode . dired-omit-mode)
  :config
  ;; Make dired-omit-mode hide all "dotfiles"
  (setq dired-omit-files
        (concat dired-omit-files "\\|^\\..*$")))

;; Some tips to speed up Dired/Dirvish over TRAMP
(use-package tramp
  :config
  (add-to-list 'tramp-connection-properties
               (list (regexp-quote "/ssh:YOUR_HOSTNAME:")
                     "direct-async-process" t))
  (setq tramp-verbose 0)
  (setq tramp-auto-save-directory (locate-user-emacs-file "tramp/"))
  (setq tramp-chunksize 2000)
  (setq tramp-use-ssh-controlmaster-options nil))

;; Addtional syntax highlighting for dired
(use-package diredfl
  :hook
  (dired-mode . diredfl-mode))

;; Use `all-the-icons' as Dirvish's icon backend
(use-package all-the-icons)

;; Or, use `vscode-icon' instead
;; (use-package vscode-icon
;;   :config
;;   (push '("jpg" . "image") vscode-icon-file-alist))
#+end_src
