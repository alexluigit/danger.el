#+AUTHOR: Alex Lu
#+EMAIL: alexluigit@gmail.com
#+startup: content

Several small extension packages to Dirvish are maintained in the subdirectory
/extensions/.  They are installed together with Dirvish if you pull the package
from MELPA.  Apart from =dirvish-media.el=, all of them are inactive by default.

These extensions can augment Dirvish through different ways such as providing
extra commands/attributes/preview methods, improving UI by the help of
=transient.el=, integration with external tools, among other things.  With them it
is possible to adapt Dirvish such that it matches your preference or behaves
similar to other familiar file explorers.

* Prerequisites

Some extensions provide extra preview methods or commands that require external
tools to work properly.

** macOS
#+BEGIN_SRC bash
brew install fd poppler ffmpegthumbnailer mediainfo imagemagick gnu-tar unzip
#+END_SRC

** Ubuntu (and other Debian-based distros)
#+BEGIN_SRC bash
apt install fd-find poppler-utils ffmpegthumbnailer mediainfo imagemagick tar unzip
#+END_SRC

** Arch Linux
#+BEGIN_SRC bash
pacman -S fd poppler ffmpegthumbnailer mediainfo imagemagick tar unzip
#+END_SRC

** Windows

I have no idea on how to install these dependencies or whether will they work on
Windows, feel free to send over a PR if you have a working example.

* Preview media files (dirvish-media.el)

This is the extension that handles the preview of media files.  Currently, these
preview methods are included in this extension:

+ ~image~: preview image files
+ ~gif~: preview GIF image files with animation
+ ~video~: preview videos files with thumbnail
+ ~audio~: preview audio files with metadata
+ ~epub~: preview epub documents, requires [[https://github.com/alexluigit/dirvish/issues/85][epub-thumbnail]] executable
+ ~pdf~: preview pdf documents via =pdf-tools=
+ ~archive~: preview archive files such as =.tar=, =.zip=

All of them are enabled by default.  To enable/disable certain preview methods,
just set ~dirvish-preview-dispatchers~ to your preferences.

For example, if for some reason you are not able to install [[https://github.com/alexluigit/dirvish/issues/85][epub-thumbnail]] or
want to display preview for epub files via packages like =nov=, just remove the
~epub~ dispatcher like this:

#+begin_src emacs-lisp
(setq dirvish-preview-dispatchers (remove 'epub dirvish-preview-dispatchers))
#+end_src

Perhaps you only want the very basic preview functionalities, namely, disable
preview for all media files.  To do that you can place ~no-media~ as the last
entry in the ~dirvish-preview-dispatchers~.

#+begin_src emacs-lisp
(setq dirvish-preview-dispatchers '(archive no-media))
#+end_src

Some of preview dispatchers, such as ~image~, generate cache images to improve the
preview experience.  Everytime you enter a directory, Dirvish scans the the
content of that directory and computes the fileset of the directory that
requires cache image generation, the corresponding caches are generated later
when Emacs is idle.

You can tweak the behavior of auto caching or turn off this feature completely
by customizing the ~dirvish-media-auto-cache-threshold~ option.  Here is how to
disable the auto caching completely.

#+begin_src emacs-lisp
(customize-set-variable 'dirvish-media-auto-cache-threshold '(0))
#+end_src

* Transient based help menu (dirvish-menu.el)

This extension provides help menu powered by =transient.el= for Dirvish.

~dirvish-dispatch~ is the prefix to invoke the top-level help menu, just like
~magit-dispatch~ as to =magit=. The menu contains most of the built-in Dired
commands and all of the Dirvish commands. Some sub-level prefix commands such as
~dirvish-mark-menu~ were created because it makes sense to group together the
Dired/Dirvish commands that serve similar purposes.

Here is a list of all prefixes provided by this extension:

+ ~dirvish-setup-menu~: change the session UI/layout/preview setup on the fly
+ ~dirvish-mark-menu~: a collection of ~dired-mark/do-*~ commands
+ ~dirvish-file-info-menu~: gather file information such as path
+ ~dirvish-chxxx-menu~: modify file attributes
+ ~dirvish-subdir-menu~: manage subdirs in the buffer
+ ~dirvish-renaming-menu~: different ways to rename files
+ ~dirvish-epa-dired-menu~: a collection of ~epa-dired-do-*~ commands

* Multi-stage copy/pasting of files (dirvish-yank.el)

Here is a quote from [[https://github.com/Fuco1/dired-hacks][dired-ranger]] that justified the ~dired-ranger-move/paste~ commands:

#+begin_quote
A feature present in most orthodox file managers is a "two-stage" copy/paste
process. Roughly, the user first selects some files, "copies" them into a
clipboard and then pastes them to the target location. This workflow is missing
in dired.

In dired, user first marks the files, then issues the dired-do-copy command
which prompts for the destination. The files are then copied there. The
dired-dwim-target option makes this a bit friendlier---if two dired windows are
opened, the other one is automatically the default target.

With the multi-stage operations, you can gather files from multiple dired
buffers into a single "clipboard", then copy or move all of them to the target
location.
#+end_quote

Multi-stage copy/paste, asynchronous I/O (whenever applicable), work with TRAMP,
=dirvish-yank= has all of them. =dirvish-yank= also handles file operations on the
same remote host, see: https://github.com/stsquad/dired-rsync/issues/24.

To copy/move/symlink/hardlink files from A to B, just mark the files in A, go to
B, and paste them with ~dirvish-yank/move/symlink/hardlink~.

See also: [[https://github.com/alexluigit/dirvish/blob/main/docs/FAQ.org#dired-ranger][comparison with dired-ranger]]

* Minibuffer file preview (dirvish-peek.el)

~dirvish-peek-mode~ gives you a preview window when narrowing file candidates
using minibuffer. It displays file preview for all of the file name narrowing
commands in the same way as =dirvish= command.

https://user-images.githubusercontent.com/16313743/158052790-22e6cf49-e18e-435c-908e-f5d91ba316a6.mp4

*Figure 1.* A demo of ~find-library~ and ~find-file~ commands after ~dirvish-peek-mode~ enabled.

The ~dirvish-peek-display-alist~ option allows you to control the window placement
of the peek window.

~dirvish-peek-mode~ currently supports =vertico=, =selectrum=, =ivy= and =icomplete[-vertical]=.

* Version-control (git) integration (dirvish-vc.el)

This extension gives Dirvish the ablity to display version-control data in
different ways.  For now we have:

+ ~vc-state~: an attribute to display the VC state as a bitmap at left fringe
+ ~git-msg~: an attribute to display git commit messages after the file name
+ ~vc-diff~: a preview dispatcher which shows changes between the working tree and
  the index of selected files at preview window.

https://user-images.githubusercontent.com/16313743/159040645-530e6f8c-e17f-49b0-ad5d-ae4a088a69b4.mp4

*Figure 2*. Toggle =vc-state= (attribute), =git-msg= (attribute) and =vc-diff= (preview dispatcher).

* Extra commands and mode-line segments (dirvish-extras.el)
** Commands

|------------------------------------+----------------------------------------|
| Command                            | Description                            |
|------------------------------------+----------------------------------------|
| ~dirvish-copy-file-name~             | Copy the file name ("foo.el")          |
| ~dirvish-copy-file-path~             | Copy the file path ("path/to/foo/bar") |
| ~dirvish-copy-file-directory~        | Copy the parent file path              |
| ~dirvish-find-file-true-path~        | Open the true name of symlinks         |
| ~dirvish-total-file-size~            | Echo total file size of marked files   |
| ~dirvish-rename-space-to-underscore~ | Rename "foo bar.el" to "foo_bar.el"    |
|------------------------------------+----------------------------------------|

** Mode-line segments

|--------------------+--------------------------------------------------------------|
| Segment            | Description                                                  |
|--------------------+--------------------------------------------------------------|
| ~free-space~         | Disk free space                                              |
| ~file-link-number~   | Number of links to file                                      |
| ~file-user~          | User name of file                                            |
| ~file-group~         | Group name of file                                           |
| ~file-time~          | Last access/modification/status change time                  |
| ~file-size~          | File size of files or file count of directories              |
| ~file-modes~         | File modes, as a string of ten letters or dashes as in ls -l |
| ~file-inode-number~  | File inode number                                            |
| ~file-device-number~ | Filesystem device number                                     |
|--------------------+--------------------------------------------------------------|

* Manage Dirvish's window layouts (dirvish-layout.el)

This extension provided several commands that can help with managing the window
layout of Dirvish sessions. They are:

+ ~dirvish-dwim~

  Open a session with a "smart" layout.  If current window is the only window of
  the frame, open a fullscreen session, otherwise open a single window session.

+ ~dirvish-layout-toggle~

  Toggle layout of current Dirvish session.  A session with layout means it has
  a companion preview window and possibly one or more parent windows.

+ ~dirvish-layout-switch~

  Cycle the layouts defined in ~dirvish-layout-recipes~

* Show icons at front of file name (dirvish-icons.el)

This extension provides two attributes: ~all-the-icons~ and ~vscode-icon~.  To tweak
the appearance of the icons, you have these options:

+ ~dirvish-all-the-icons-height~
+ ~dirvish-all-the-icons-offset~
+ ~dirvish-all-the-icons-palette~
+ ~dirvish-vscode-icon-size~

* Toggle Dirvish in side window (dirvish-side.el)

This extension provides the ~dirvish-side~ command. It toggles a Dirvish session
as a sidebar in the frame.

[[https://user-images.githubusercontent.com/16313743/173187130-bd16f99b-93b1-4f3f-903c-65e7cf240198.png][https://user-images.githubusercontent.com/16313743/173187130-bd16f99b-93b1-4f3f-903c-65e7cf240198.png]]

* Setup ls switches on the fly (dirvish-ls.el)

This extension provides commands to changing the ls listing switches like a
breeze. No manual editing anymore!

[[https://user-images.githubusercontent.com/16313743/178141860-784e5744-a5b7-4a7b-9bdb-f0f981ca2dba.svg][https://user-images.githubusercontent.com/16313743/178141860-784e5744-a5b7-4a7b-9bdb-f0f981ca2dba.svg]]

*Figure 3*. left: ~dirvish-quicksort~  right: ~dirvish-ls-switches-menu~

* Dirvish as the interface of fd (dirvish-fd.el)

This is the BEST =fd= frontend, period.

Here is a quick demo.

https://user-images.githubusercontent.com/16313743/170814774-98cc598d-6bc5-4fc3-9eea-21c98d6d4772.mp4

Too fast? Let's break it down:

1. M-x ~dirvish-fd~, input /test/ as the search pattern and confirm
2. Oh, too many results. How about some additional filtering?
3. M-x ~dirvish-fd-switches-menu~
4. Press =f= (show file only，no directories)
5. Press =-e=, input "/py,yaml/", meaning search for these 2 extensions only
6. Press =-E=, input "/Emacs/", exclude the glob in the results
7. Press =RET=, refresh the results

Wait, there's more: ~dirvish-quicksort~ and ~dirvish-ls-switches-menu~ also works
for this buffer.

This extension also provides the ~dirvish-fd-jump~ command which allows you to go
to any directory in the file system using results from =fd= command as completions.

* Turn Dirvish into a tree browser (dirvish-subtree.el)

This extension gives Dirvish the ability to toggle a directory as subtree
(~dirvish-subtree-toggle~), which can be seen as a stripped-down version of
=dired-subtree=.

You can use ~dirvish-subtree-toggle~ to toggle the directory under the cursor as a
subtree.  Add ~subtree-state~ to ~dirvish-attributes~ gives you an indicator about
whether the directory is expanded or not.

* History navigation commands (dirvish-history.el)

|-----------------------------+---------------------------------------|
| Command                     | Description                           |
|-----------------------------+---------------------------------------|
| ~dirvish-history-jump~        | Go to recently visited directories    |
| ~dirvish-history-go-forward~  | Go forward history (session locally)  |
| ~dirvish-history-go-backward~ | Go backward history (session locally) |
| ~dirvish-history-last~        | Go to most recent used Dirvish buffer |
|-----------------------------+---------------------------------------|

* Quick keys for frequently visited places (dirvish-quick-access.el)

This extension gives you the ability of jumping to anywhere in the filesystem
with minimal (2 usually) keystrokes.  Just define the entries in
~dirvish-quick-access-entries~ and access them by calling ~dirvish-quick-access~.

* Collapse unique nested paths (dirvish-collapse.el)

This extension provides the ~collapse~ attribute.

#+begin_quote
Often times we find ourselves in a situation where a single file or directory is
nested in a chain of nested directories with no other content. This is sometimes
due to various mandatory layouts demanded by packaging tools or tools generating
these deeply-nested "unique" paths to disambiguate architectures or versions
(but we often use only one anyway). If the user wants to access these
directories they have to quite needlessly drill-down through varying number of
"uninteresting" directories to get to the content.

                                                   -- from [[https://github.com/Fuco1/dired-hacks][dired-collapse]]
#+end_quote

See also: [[https://github.com/alexluigit/dirvish/blob/main/docs/FAQ.org#dired-collapse][comparison with dired-collapse]]

* Live-narrowing of Dirvish buffer (dirvish-narrow.el)

This package provides live filtering of files in dirvish buffers.  In general,
after calling ~dirvish-narrow~ you type a filter string into the minibuffer.
After each change the changes automatically reflect in the buffer. Typing =RET=
will exit the live filtering mode and leave the dired buffer in the narrowed
state.  Typing =C-g= will cancel the narrowing and restore the original view.  To
bring it back to the original view after the narrowing, just call ~revert-buffer~
(usually bound to =g=).

After invoking the ~dirvish-narrow~ command, the user input in the minibuffer is
converted to regexps by a compiler function.  You can customize the
~dirvish-narrow-regex-builder~ option to specify this function.  For example, set
this option to ~orderless-pattern-compiler~ enables orderless style pattern
matching while narrowing the Dirvish buffer.

* Pin files you are interested in at top (dirvish-emerge.el)

TODO
