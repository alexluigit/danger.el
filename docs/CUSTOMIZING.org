#+AUTHOR: Alex Lu
#+EMAIL: alexluigit@gmail.com
#+startup: content

*TL;DR*: Grab the config from [[#Sample-config][Sample config]]. Read following docs in-depth if you
want further customizations.

-----

* In relation to Dired

A Dirvish session holds a set of buffers with ~dirvish-mode~ as its
~major-mode~. Since ~dirvish-mode~ is a derived mode from ~dired-mode~, most of the
Dired commands work exactly the same in a ~dirvish-mode~ buffer.  Here are some
Dirvish exclusive features or aspects that Dired and Dirvish handle differently.

** Cache directory

Dirvish uses ~dirvish-cache-dir~ to store cached images and other persistent data.

** File details display

Dirvish hides the file details by default. If you want the details at buffer
initialization like in Dired, you can customize the ~dirvish-hide-details~ option.

** Open files externally

For some filetypes such as media files or special documents, you may want to
open them with an external application by default.  You can achieve this by
customizing the ~dirvish-open-with-programs~ option.  By default, it instructs
Emacs to open video/audio files using =mpv=.

** Parsing switches

Dirvish avoids regex-based solutions as much as possible, this also applies to
the parsing of ~dired-listing/actual-switches~ and ~dirvish-fd-switches~.  As a
result, in order to setup ~dired-listing-switches~ and ~dirvish-fd-switches~
correctly, there are a few rules here:

1. Make sure to use the long name of ~ls~ flags whenever possible.

   * use =--almost-all= instead of =-A=
   * use =--sort=version= instead of =-v=

2. avoid duplicate flags which makes no sense.

   These 3 patterns give the same directory listing result, but the =sort=
   attribute would only get correct information with the last one.

   * =--sort=version --sort=time= (duplicate, the latter flag is ignored)
   * =-v --sort-time= (same as the above one, meanwhile this also violates rule NO.1)
   * =--sort=time=

3. Use ~dirvish-quicksort~ instead of ~dired-sort-toggle-or-edit~

   If you insist on using the ~dired-sort-toggle-or-edit~ command, you'll have
   to obey the above rules when entering the ls flags.

** Isolated sessions

Each Dirvish has its own window layout along with some other isolated niceties
such as header string. This makes it easy for Dirvish to adapt itself towards
different file management tasks.  You can customize the ~dirvish-default-layout~
option to setup the defualt window layout for fullscreen sessions.

** TRAMP integration

Dirvish integrates TRAMP at its core.  But most of the features (file preview,
asynchronous file transfer through =dirvish-yank= .etc) that are available in
localhost are NOT enabled over a /synchronous/ TRAMP connection (see:
[[https://www.gnu.org/software/tramp/#Improving-performance-of-asynchronous-remote-processes-1][TRAMP-async]]).  To enable them on a remote host, one will need to have a proper
ssh config such as ssh-agent for that host, because it requires working SSH
authentication which bypasses the password entering to work.

You can improve the speed and responsiveness of TRAMP by tweaking its options,
see the sample config below.

** Buffer management

=dired= command and friends create new Dired buffers, hence navigating through
the file system always end up with a lot of Dired buffers. To avoid this, one
can either replace ~dired-find-file~ with ~dired-find-alternate-file~ or enable
~dired-kill-when-opening-new-dired-buffer~, but they introduce two new issues:

- Dired buffers in other windows/tabs/frames might be killed unexpectedly
- Dired buffers are no longer reusable

As a comparison, the directory/preview buffers are reused during a Dirvish
session and get killed when user explicitly exit the session.

The buffer holding the last entry of the session won't get killed on session
exit if ~dirvish-reuse-session~ is enabled (disabled by default).

** Switches in mode line

See [[#Mode-line--Header-line][Mode line | Header line]].  The ~dired-switches-in-mode-line~ option is ignored in Dirvish.

** Hooks

Apart from the hooks provided by Dired, Dirvish got some additions.

|---------------------------+-------------------------------------------|
| Hook                      | Description                               |
|---------------------------+-------------------------------------------|
| ~dirvish-activation-hook~   | Executed on session activation.           |
| ~dirvish-deactivation-hook~ | Executed on session deactivation.         |
| ~dirvish-mode-hook~         | Executed on parent buffer initialization. |
| ~dirvish-setup-hook~        | Executed after the root buffer is ready.  |
| ~dirvish-after-revert-hook~ | Executed after ~dirvish-revert~.            |
| ~dirvish-find-entry-hook~   | Executed after ~dirvish-find-entry~.        |
|---------------------------+-------------------------------------------|

* Dirvish "attributes"

A Dirvish attribute is a visual element that shows up within the file line,
which provides extra information for that file.

For now Dirvish ships with these attributes:

+ ~subtree-state~: A indicator for directory expanding state.
+ ~all-the-icons~: File icons provided by =all-the-icons.el=.
+ ~vscode-icon~: File icons provided by =vscode-icon.el=.
+ ~collapse~: Collapse unique nested paths.
+ ~git-msg~: Append git commit message to filename.
+ ~vc-state~: The version control state at left fringe.
+ ~file-size~: Show file size or directories file count at right fringe.

Here is an overview of how does these attributes look like:

[[https://user-images.githubusercontent.com/16313743/178137697-3ff4ca5a-aaf3-44d4-b644-9e9a2e7f911a.svg][https://user-images.githubusercontent.com/16313743/178137697-3ff4ca5a-aaf3-44d4-b644-9e9a2e7f911a.svg]]

To achieve this, the only thing you need to do is put these symbols into
~dirvish-attributes~ like this (order doesn't matter):

#+begin_src emacs-lisp
(setq dirvish-attributes '(vc-state subtree-state all-the-icons collapse git-msg file-size))
#+end_src

* Mode line | Header line

Put the segments you wanted into ~dirvish-mode-line-format~.

For those want to tweak the appearance of mode-line, just
customize the ~dirvish-mode-line-position~ and ~dirvish-mode-line-height~ option.

Dirvish also allows you to customize the header line in the same way of
customizing mode line. Check out ~dirvish-header-line-format/position/height~.

* File preview

Dirvish uses different strategies towards various filetypes.  You may want to
turn off preview for certain file extensions, ~dirvish-preview-disabled-exts~
allows you to do that.

A preview dispatcher represents a strategy for file preview on certain
conditions. The variable ~dirvish-preview-dispatchers~, which holds all the active
dispatchers, has the default value looks like:

#+begin_src emacs-lisp
(image gif video audio epub pdf archive)
#+end_src

Each dispatcher in this list handles the validation and preview content
generation for the corresponding filetype.  See also: [[https://github.com/alexluigit/dirvish/blob/main/docs/EXTENSIONS.org#preview-media-files-dirvish-mediael][Preview media files]].

Here are several examples to extend the preview capabilities of Dirvish.

** Preview PDF files with generated thumbnail

The default ~pdf~ preview method uses =pdf-tools= to open the document, which works
fine for most of the pdf documents, but it feels sluggish for some documents
especially those big ones.

Dirvish provided an alternative PDF preview dispatcher ~pdf-preface~ which
generates preface image for pdf files and use those preface images as the
preview.  This allows the user to preview big pdf files in a non-blocking
fashion.

Note: this dispatcher requires the =pdftoppm= executable.

#+begin_src emacs-lisp
(setq dirvish-preview-dispatchers
      (cl-substitute 'pdf-preface 'pdf dirvish-preview-dispatchers))
#+end_src

** Preview directory using ~exa~ command

Let's assume you don't like the default directory preview results provided by
Dired, you can create a directory previewer that utilizes the ~exa~ command:

#+begin_src emacs-lisp
(dirvish-define-preview exa (file)
  "Use `exa' to generate directory preview."
  :require ("exa") ; tell Dirvish to check if we have the executable
  (when (file-directory-p file) ; we only interest in directories here
    `(shell . ("exa" "--color=always" "-al" ,file)))) ; use the command output as preview

(add-to-list 'dirvish-preview-dispatchers 'exa)
#+end_src

This makes Dirvish use the output from ~exa~ shell command as your preview content
for a directory entry. The other benefit of doing so is that Dirvish execute
shell commands asynchronously, therefore preview a huge directory won't block
the main process of Emacs.

On a side note, you can customize the corresponding =ansi-color= faces to change
the coloring in the preview window.

#+begin_src emacs-lisp
(set-face-attribute 'ansi-color-blue nil :foreground "#FFFFFF")
#+end_src

[[https://user-images.githubusercontent.com/16313743/158852998-ebf4f1f7-7e12-450d-bb34-ce04ac22309c.png][https://user-images.githubusercontent.com/16313743/158852998-ebf4f1f7-7e12-450d-bb34-ce04ac22309c.png]]
[screenshot from the ~doom-one~ theme]

* Working with Doom Emacs
** Using dired module with ~+dirvish~ flag

Doom provides a ~+dirvish~ flag in its dired module which can be enabled like this.

#+begin_src emacs-lisp
;; .doom.d/init.el
:emacs
(dired +dirvish)
#+end_src

It is recommended to use the latest version the package.

#+begin_src emacs-lisp
;; .doom.d/packages.el
(unpin! dirvish)
#+end_src

** Using dired module w/o ~+dirvish~ flag

The =dired= module in Doom Emacs provides a lot of features by the help of various
third-party Dired packages, which works fine for users who just want a OOTB
Dired experience.  But, alas, there are downsides to this.

1. To make these utilities work together inside of Doom, it applied some hacks
   to eliminate the conflicts among them (FWIW, this actully happened to many
   people's Dired config), which may cause troubles when users want to tweak the
   behaviors of these packages.

2. Adopting a new functionality to Dired becomes very difficult since there are
   too many moving parts involve with it.

Dirvish not only includes almost every feature that this module provides, but
also implemented them under the same architecture powered by =dirvish.el= in the
form of separate extensions. As a result, all of them are modular tools that are
independent of each other yet can operate in tandem without any user
interference, which means ugly hacks is no longer needed.

If you still want to use the =dired= module in Doom, here are some caveats.

*** Remap ~+dired/quit-all~ command (required)
  
After you enable the =dired= module, Doom remaps =q= key to a custom command
~+dired/quit-all~, which doesn't work well with Dirvish. You should use
~dirvish-quit~ instead (which is bound to =q= by default).

*** Use ~vc-state~ attribute instead of ~diff-hl-dired-mode~

The ~vc-state~ attribute in Dirvish can achieve the same functionality without
sacrificing performance. Meanwhile, ~diff-hl-dired-mode~ doesn't mesh well with
=dirvish-subtree= nor =dired-subtree=.

=dired-git-info= can be mirrored by the ~git-msg~ attribute.

*** Use =dirvish-fd= instead of =fd-dired=

See [[https://github.com/alexluigit/dirvish/blob/main/docs/FAQ.org#find-dired--fd-dired][FAQ]].

*** Use =dirvish-yank= instead of =dired-rsync=

Multi-stage copy/paste, asynchronous I/O (whenever applicable), work with TRAMP,
=dirvish-yank= has all of them. =dirvish-yank= also handles file operations on the
same remote host, see: https://github.com/stsquad/dired-rsync/issues/24.

* Sample config
** Dired | Dirvish

#+begin_src emacs-lisp
;; This is *NECESSARY* for Doom users who enabled `dired' module
;; (map! :map dired-mode-map :ng "q" #'dirvish-quit)

(use-package dirvish
  :init
  (dirvish-override-dired-mode)
  :custom
  (dirvish-quick-access-entries
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")
     ("m" "/mnt/"                       "Drives")
     ("t" "~/.local/share/Trash/files/" "TrashCan")))
  ;; (dirvish-header-line-format '(:left (path) :right (free-space)))
  (dirvish-mode-line-format ; it's ok to place string inside
   '(:left (sort file-time " " file-size symlink) :right (omit yank index)))
  ;; Don't worry, Dirvish is still performant even you enable all these attributes
  (dirvish-attributes '(all-the-icons file-size collapse subtree-state vc-state git-msg))
  ;; Maybe the icons are too big to your eyes
  ;; (dirvish-all-the-icons-height 0.8)
  ;; In case you want the details at startup like `dired'
  ;; (dirvish-hide-details nil)
  :config
  (dirvish-peek-mode)
  ;; Dired options are respected except a few exceptions, see *In relation to Dired* section above
  (setq dired-dwim-target t)
  (setq delete-by-moving-to-trash t)
  ;; Enable mouse drag-and-drop files to other applications
  (setq dired-mouse-drag-files t)                   ; added in Emacs 29
  (setq mouse-drag-and-drop-region-cross-program t) ; added in Emacs 29
  ;; Make sure to use the long name of flags when exists
  ;; eg. use "--almost-all" instead of "-A"
  ;; Otherwise some commands won't work properly
  (setq dired-listing-switches
        "-l --almost-all --human-readable --time-style=long-iso --group-directories-first --no-group")
  :bind
  ;; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
  (("C-c f" . dirvish-fd)
   ;; Dirvish has all the keybindings (except `dired-summary') in `dired-mode-map' already
   :map dirvish-mode-map
   ;; ("h" . dired-up-directory)
   ;; ("j" . dired-next-line)
   ;; ("k" . dired-previous-line)
   ;; ("l" . dired-find-file)
   ;; ("i" . wdired-change-to-wdired-mode)
   ;; ("." . dired-omit-mode)
   ("a"   . dirvish-quick-access)
   ("f"   . dirvish-file-info-menu)
   ("y"   . dirvish-yank-menu)
   ("N"   . dirvish-narrow)
   ("^"   . dirvish-history-last)
   ("h"   . dirvish-history-jump) ; remapped `describe-mode'
   ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
   ("TAB" . dirvish-subtree-toggle)
   ("M-n" . dirvish-history-go-forward)
   ("M-p" . dirvish-history-go-backward)
   ("M-l" . dirvish-ls-switches-menu)
   ("M-m" . dirvish-mark-menu)
   ("M-f" . dirvish-layout-toggle)
   ("M-s" . dirvish-setup-menu)
   ("M-e" . dirvish-emerge-menu)
   ("M-j" . dirvish-fd-jump)))
#+end_src

** Complementary packages

These packages are only listed here for discoverability.

#+begin_src emacs-lisp
(use-package dired-x
  ;; Enable dired-omit-mode by default
  ;; :hook
  ;; (dired-mode . dired-omit-mode)
  :config
  ;; Make dired-omit-mode hide all "dotfiles"
  (setq dired-omit-files
        (concat dired-omit-files "\\|^\\..*$")))

;; Some tips to speed up Dired/Dirvish over TRAMP
(use-package tramp
  :config
  (add-to-list 'tramp-connection-properties
               (list (regexp-quote "/ssh:YOUR_HOSTNAME:")
                     "direct-async-process" t))
  (setq tramp-verbose 0)
  (setq tramp-auto-save-directory (locate-user-emacs-file "tramp/"))
  (setq tramp-chunksize 2000)
  (setq tramp-use-ssh-controlmaster-options nil))

;; Addtional syntax highlighting for dired
(use-package diredfl
  :hook
  (dired-mode . diredfl-mode))

;; Use `all-the-icons' as Dirvish's icon backend
(use-package all-the-icons)

;; Or, use `vscode-icon' instead
;; (use-package vscode-icon
;;   :config
;;   (push '("jpg" . "image") vscode-icon-file-alist))
#+end_src
